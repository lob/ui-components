name: Publish

on:
  push:
    branches:
      - main

jobs:
  # Get the versions of node and npm as defined in the package.json engines
  get-versions:
    runs-on: ubuntu-latest

    outputs:
      node_version: ${{ steps.node_version.outputs.prop }}
      npm_version: ${{ steps.npm_version.outputs.prop }}

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Read node version from package.json
      id: node_version
      uses: notiz-dev/github-action-json-property@v0.1.0
      with:
        path: "package.json"
        prop_path: "engines.node"

    - run: |
        echo "Node version found: ${{ steps.node_version.outputs.prop }}"

    - name: Read npm version from package.json
      id: npm_version
      uses: notiz-dev/github-action-json-property@v0.1.0
      with:
        path: "package.json"
        prop_path: "engines.npm"

    - run: |
        echo "npm version found: ${{ steps.npm_version.outputs.prop }}"

  run-tests:
    runs-on: ubuntu-latest

    needs: get-versions

    env:
      NODE_VERSION: ${{ needs.get-versions.outputs.node_version }}
      NPM_VERSION: ${{ needs.get-versions.outputs.npm_version }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup node with the version defined in package.json engines.
      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Setup npm with the version defined in package.json engines.
      - name: Use npm ${{ env.NPM_VERSION }}
        run: npm install -g npm@${{ env.NPM_VERSION }}

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run unit tests
        run: npm run test:ci

  # Publish package to npm
  publish:
    runs-on: ubuntu-latest

    needs: [get-versions, run-tests]

    env:
      NODE_VERSION: ${{ needs.get-versions.outputs.node_version }}
      # Used to publish the package to the npm registry
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup node with the version defined in package.json engines.
      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Setup npm with the version defined in package.json engines.
      - name: Use npm ${{ env.NPM_VERSION }}
        run: |
          npm install -g npm@${{ env.NPM_VERSION }}

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build the package
        run: npm run build

      - name: Publish the package to npm
        id: publish
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ env.NPM_TOKEN }}
          # only publish if the version in package.json has changed
          check-version: true

      - name: Add git tag ${{ steps.publish.outputs.version }}
        if: steps.publish.outputs.type != 'none'
        uses: actions/github-script@v5
        env:
          NEW_VERSION: '${{ steps.publish.outputs.version }}'
          OLD_VERSION: '${{ steps.publish.outputs.old-version }}'
        with:
          script: |
            const { OLD_VERSION, NEW_VERSION } = process.env;

            console.log(`Version changed: ${OLD_VERSION} => ${NEW_VERSION}`);

            // create the tag
            const tagRes = await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${NEW_VERSION}`,
              sha: context.sha
            });
            console.log(`Tag creation result: ${tagRes.status}`);

            // create the release
            console.log(`Creating release ${NEW_VERSION}`);
            const relRes = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: NEW_VERSION,
              name: NEW_VERSION,
              body: `Please refer to [CHANGELOG.md](https://github.com/lob/ui-components/blob/main/CHANGELOG.md) for details.`,
              generate_release_notes: true
            });
            console.log(`Release creation result: ${relRes.status}`);
